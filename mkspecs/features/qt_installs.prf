#library
!qt_no_install_library {
    win32 {
       dlltarget.path = $$[QT_INSTALL_BINS]
       INSTALLS += dlltarget
    }
    target.path = $$[QT_INSTALL_LIBS]
    INSTALLS += target
}

#headers
qt_install_headers {
    INSTALL_HEADERS = $$SYNCQT.HEADER_FILES

    equals(TARGET, phonon) {
        class_headers.path = $$[QT_INSTALL_HEADERS]/$$TARGET
    } else {
        flat_headers.files = $$INSTALL_HEADERS
        flat_headers.path = $$[QT_INSTALL_HEADERS]/Qt
        INSTALLS += flat_headers

        class_headers.path = $$[QT_INSTALL_HEADERS]/$$TARGET
    }
    class_headers.files = $$SYNCQT.HEADER_CLASSES
    INSTALLS += class_headers

    targ_headers.files = $$INSTALL_HEADERS
    targ_headers.path = $$[QT_INSTALL_HEADERS]/$$TARGET
    INSTALLS += targ_headers

    private_headers.files = $$SYNCQT.PRIVATE_HEADER_FILES
    private_headers.path = $$[QT_INSTALL_HEADERS]/$$TARGET/$$eval(QT.$${MODULE}.VERSION)/$$TARGET/private
    INSTALLS += private_headers

    qpa_headers.files = $$SYNCQT.QPA_HEADER_FILES
    qpa_headers.path = $$[QT_INSTALL_HEADERS]/$$TARGET/$$eval(QT.$${MODULE}.VERSION)/$$TARGET/qpa
    INSTALLS += qpa_headers
}

#module
qt_install_module {
    !isEmpty(MODULE_PRI) {
        pritarget.path = $$[QT_HOST_DATA]/mkspecs/modules
        pritarget.files = $$MODULE_PRI
        INSTALLS += pritarget
    } else {
        warning("Project $$basename(_PRO_FILE_) is a module, but has not defined MODULE_PRI, which is required for Qt to expose the module to other projects.")
    }
}

qt_install_module_docs {
    module_docs.files = $$QMAKE_DOCS_OUTPUTDIR
    module_docs.path = $$[QT_INSTALL_DOCS]
    module_docs.CONFIG += no_check_exist directory no_default_install
    module_docs.depends += docs
    INSTALLS += module_docs

    install_docs.depends = install_module_docs
    uninstall_docs.depends = uninstall_module_docs
    QMAKE_EXTRA_TARGETS += install_docs uninstall_docs
}

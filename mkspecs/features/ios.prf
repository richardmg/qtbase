isEmpty(QT_ARCH) {
    # The iPhoneOS and iPhoneSimulator targets share the same toolchain,
    # so when configure runs the arch tests it passes the correct sysroot,
    # but we fail to pick up the arcitecture since we're not passing -arch
    # yet. Xcode does not seem to have a way to run the shared toolchain
    # in a way that will automatically  do this (for example xcrun -sdk).
    contains(QMAKE_MAC_SDK, iphoneos): QT_ARCH = armv7
    else: QT_ARCH = i386 # Simulator
} else {
    # Fix up the QT_ARCH to be more specific
    contains(QT_ARCH, arm) {
        # Samsung S5PC100, Apple A4, A5, A5X
        QT_ARCH = armv7

        # FIXME: How do we support armv7s when Qt can't do universal builds?
    }
}

!equals(MAKEFILE_GENERATOR, XCODE) {
    arch_flag = -arch $$QT_ARCH
    QMAKE_CFLAGS           += $$arch_flag
    QMAKE_CXXFLAGS         += $$arch_flag
    QMAKE_OBJECTIVE_CFLAGS += $$arch_flag
    QMAKE_LFLAGS           += $$arch_flag
}

contains(TEMPLATE, app) {
    # We have to do the link and dependency resolution for the platform plugin
    # manually, since QTPLUGIN and the prl lookup logic does not support
    # the -force_load link style, which we use since we load the platform
    # plugin from the platform plugin.
    lib_path_and_base = $$[QT_INSTALL_PLUGINS/get]/platforms/libqios$$qtPlatformTargetSuffix()
    LIBS += "-force_load $${lib_path_and_base}.$${QMAKE_EXTENSION_STATICLIB}"
    LIBS += $$fromfile($${lib_path_and_base}.prl, QMAKE_PRL_LIBS)

    QTPLUGIN += iosmain
    DEFINES += main=qt_main
}
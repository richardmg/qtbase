
equals(TEMPLATE, app) {
    qt:app_bundle:!macx-xcode {
        # For Qt applications we want Xcode project files as the generated output,
        # but since qmake doesn't handle the transition between makefiles and Xcode
        # project files (which happens when using subdirs), we create a wrapper
        # makefile that takes care of generating the Xcode project, and allows
        # building by calling out to xcodebuild.
        TEMPLATE = aux

        CONFIG -= have_target qt staticlib dll
        SOURCES =
        RESOURCES =
        INSTALLS =

        TARGET_XCODE_PROJECT_DIR = $${TARGET}.xcodeproj

        system("cd $$system_quote($$OUT_PWD) && $${QMAKE_QMAKE} $$system_quote($$_PRO_FILE_) -spec macx-xcode")

        # We use xcodebuild to do the actual build, but filter out the verbose
        # output that shows all environment variables for each build step.
        xcodebuild_build.commands = "@xcodebuild build | grep -v setenv"
        QMAKE_EXTRA_TARGETS += xcodebuild_build
        all.depends = xcodebuild_build
        QMAKE_EXTRA_TARGETS += all

        # We do the same for the clean action
        xcodebuild_clean.commands = "@xcodebuild clean"
        QMAKE_EXTRA_TARGETS += xcodebuild_clean
        clean.depends = xcodebuild_clean
        QMAKE_EXTRA_TARGETS += clean

        # And distclean
        xcodebuild_distclean.commands = "$(DEL_FILE) -R $$TARGET_XCODE_PROJECT_DIR"
        QMAKE_EXTRA_TARGETS += xcodebuild_distclean
        distclean.depends = xcodebuild_distclean
        QMAKE_EXTRA_TARGETS += distclean
    }
}

contains(QMAKE_MAC_SDK, ^iphonesimulator.*): \
 	    error("iOS simulator is handled automatically. Please choose an 'iphoneos' SDK.")
 	
equals(TEMPLATE, lib):!contains(MAKEFILE_GENERATOR, XCODE): load(spliced_simulator_and_device)

macx-xcode {
    ios_device_family.name = TARGETED_DEVICE_FAMILY
    ios_device_family.value = $$QMAKE_IOS_TARGETED_DEVICE_FAMILY
    QMAKE_MAC_XCODE_SETTINGS += ios_device_family
}

iphonesimulator {
    QT_ARCH = i386
    QMAKE_MAC_SDK ~= s,^iphoneos,iphonesimulator,

    # Since the CPU feature detection done by configure is limited to one
    # target at the moment, we disable SIMD support for simulator.
    CONFIG -= simd
} else:isEmpty(QT_ARCH) {
    QT_ARCH = arm
 }

# Be more specific about which architecture we're targeting
equals(QT_ARCH, arm): \
    actual_archs = armv7
else: \
    actual_archs = $$QT_ARCH

macx-xcode {
    QMAKE_XCODE_ARCHS = $$actual_archs
} else {
    for(arch, actual_archs): \
        arch_flags += -arch $$arch

    QMAKE_CFLAGS           += $$arch_flags
    QMAKE_CXXFLAGS         += $$arch_flags
    QMAKE_OBJECTIVE_CFLAGS += $$arch_flags
    QMAKE_LFLAGS           += $$arch_flags
}
unset(actual_archs)

load(default_post)
